#!/usr/bin/env python3

PACKAGE = "actor_ros"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Controller Parameters -------------------------------------------------------
# gen.add("debug", bool_t, 0, "Debug Mode Toggle", False)

gen.add("speed_limit", double_t, 0, "Software Controlled Speed Limit (mph)", 5.0, 0, 35)
gen.add("reverse_speed_limit", double_t, 0, "Software Controlled Reverse Speed Limit (mph)", -3.0, -10, 0)
gen.add("twist_timeout", double_t, 0, "Twist Message Timeout (s)", 0.5, 0, 2)

gen.add("steering_deadband", double_t, 0, "Steering Deadband (+/- deg)", 3, 0, 30)
gen.add("zero_mph_deadzone", double_t, 0, "Zero MPH Deadzone (mph)", 0.1, 0, 0.5)

gen.add("brake_max", double_t, 0, "Brake Max Value (%)", 0.4, 0.01, 0.6)
gen.add("brake_ramp_hz", double_t, 0, "Brake Ramp Frequency (Hz)", 10, 10, 50)
gen.add("light_braking_threshold", double_t, 0, "Light Braking Threshold for speed controller", -10, -100, -0)
gen.add("light_braking_value", double_t, 0, "Fixed Light Braking Value (%)", 0.075, 0, 0.2)

gen.add("speed_kp", double_t, 0, "Speed Controller Proportional Gain", 0.4)
gen.add("speed_ki", double_t, 0, "Speed Controller Integral Gain", 1.0)
gen.add("speed_kd", double_t, 0, "Speed Controller Derivative Gain", 0.0)

gen.add("steering_kp", double_t, 0, "Steering Controller Proportional Gain", 0.4)
gen.add("steering_ki", double_t, 0, "Steering Controller Integral Gain", 1.0)
gen.add("steering_kd", double_t, 0, "Steering Controller Derivative Gain", 0.0)

gen.add("control_rate_hz", double_t, 0, "PID Controller Rate (Hz)", 50, 1, 100)


# Examples
# gen.add("int_param", int_t, 0, "An Integer parameter", 50, 0, 100)
# gen.add("double_param", double_t, 0, "A double parameter", 0.5, 0, 1)
# gen.add("str_param", str_t, 0, "A string parameter", "Hello World")
# gen.add("bool_param", bool_t, 0, "A Boolean parameter", True)

# size_enum = gen.enum(
#     [
#         gen.const("Small", int_t, 0, "A small constant"),
#         gen.const("Medium", int_t, 1, "A medium constant"),
#         gen.const("Large", int_t, 2, "A large constant"),
#         gen.const("ExtraLarge", int_t, 3, "An extra large constant"),
#     ],
#     "An enum to set size",
# )

# gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)


exit(gen.generate(PACKAGE, "actor_control", "ActorControl"))
